name: Coverage Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive coverage analysis daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  coverage-analysis:
    name: Comprehensive Coverage Analysis
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Start test server
      run: |
        npm run test:server &
        sleep 5

    - name: Run comprehensive test suite with coverage
      env:
        COVERAGE_ENABLED: 'true'
        COVERAGE_THRESHOLD: '90'
        DEBUG: 'true'
        NODE_ENV: 'test'
      run: |
        echo "üîç Running comprehensive coverage analysis..."
        npm run test:all

    - name: Generate detailed coverage report
      run: |
        echo "üìä Generating coverage analysis..."

        # Create coverage summary
        cat > coverage-summary.md << 'EOF'
        # Coverage Analysis Report

        ## Test Suite Coverage Breakdown

        This report provides detailed analysis of test coverage across all test types.

        EOF

        # Add unit test coverage
        if [ -f "coverage/lcov.info" ]; then
          echo "### Unit Tests" >> coverage-summary.md
          npx nyc report --reporter=text-summary >> coverage-summary.md
          echo "" >> coverage-summary.md
        fi

        # Add E2E coverage analysis
        if [ -d "coverage-report" ]; then
          echo "### E2E Tests Coverage" >> coverage-summary.md
          echo "- Total elements discovered: $(find coverage-report -name '*.json' -exec grep -l '"totalElements"' {} \; | wc -l)" >> coverage-summary.md
          echo "- Coverage reports generated: $(ls -1 coverage-report/*.json 2>/dev/null | wc -l)" >> coverage-summary.md
          echo "" >> coverage-summary.md
        fi

        # Add file-by-file coverage analysis
        echo "### File Coverage Analysis" >> coverage-summary.md
        echo '```' >> coverage-summary.md
        find src -name "*.ts" -exec echo "üìÑ {}" \; >> coverage-summary.md
        echo '```' >> coverage-summary.md
        echo "" >> coverage-summary.md

        # Add recommendations
        echo "### Coverage Recommendations" >> coverage-summary.md
        echo "1. Ensure all public APIs have test coverage" >> coverage-summary.md
        echo "2. Add integration tests for complex workflows" >> coverage-summary.md
        echo "3. Verify E2E coverage includes all user interactions" >> coverage-summary.md
        echo "" >> coverage-summary.md

        cat coverage-summary.md

    - name: Upload coverage to multiple services
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        # Upload to Codecov
        if [ -n "$CODECOV_TOKEN" ]; then
          echo "üì§ Uploading to Codecov..."
          npx codecov --file coverage/lcov.info --flags unittests --name codecov-umbrella || echo "Codecov upload failed"
        fi

    - name: Generate coverage badge
      if: matrix.node-version == '20.x' && github.ref == 'refs/heads/main'
      run: |
        echo "üèÜ Generating coverage badge..."
        if [ -f "coverage/coverage-summary.json" ]; then
          COVERAGE_PERCENT=$(node -e "console.log(JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.lines.pct)")
          echo "Coverage percentage: $COVERAGE_PERCENT%"
          # Badge generation would go here
        fi

    - name: Archive coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-analysis-${{ matrix.node-version }}
        path: |
          coverage/
          coverage-report/
          test-results/
          coverage-summary.md
        retention-days: 30

    - name: Coverage thresholds check
      run: |
        echo "üéØ Checking coverage thresholds..."

        # Check unit test coverage
        if [ -f "coverage/coverage-summary.json" ]; then
          UNIT_COVERAGE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.lines.pct)")
          echo "Unit test coverage: $UNIT_COVERAGE%"

          if (( $(echo "$UNIT_COVERAGE < 80" | bc -l) )); then
            echo "‚ùå Unit test coverage below 80% threshold"
            exit 1
          else
            echo "‚úÖ Unit test coverage meets threshold"
          fi
        fi

        # Check E2E coverage if available
        if [ -d "coverage-report" ]; then
          echo "‚úÖ E2E coverage reports generated"
          REPORT_COUNT=$(ls -1 coverage-report/*.json 2>/dev/null | wc -l)
          echo "üìä Generated $REPORT_COUNT coverage reports"
        fi

    - name: PR Coverage Comment
      if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          if (fs.existsSync('coverage-summary.md')) {
            const summary = fs.readFileSync('coverage-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üìä Coverage Analysis Report\n\n${summary}`
            });
          }

  regression-testing:
    name: Coverage Regression Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Checkout main branch for comparison
      run: |
        git checkout origin/main -b main-branch
        mkdir coverage-main
        cp -r . coverage-main/ || true
        git checkout -

    - name: Run coverage on main branch
      run: |
        cd coverage-main
        npm ci
        npm run build
        npm run test:unit -- --coverage || echo "Main branch tests failed"
        cd ..

    - name: Run coverage on PR branch
      run: |
        npm run test:unit -- --coverage

    - name: Compare coverage
      run: |
        echo "üìà Comparing coverage with main branch..."

        if [ -f "coverage-main/coverage/coverage-summary.json" ] && [ -f "coverage/coverage-summary.json" ]; then
          MAIN_COVERAGE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('coverage-main/coverage/coverage-summary.json', 'utf8')).total.lines.pct)")
          PR_COVERAGE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.lines.pct)")

          echo "Main branch coverage: $MAIN_COVERAGE%"
          echo "PR branch coverage: $PR_COVERAGE%"

          DIFF=$(echo "$PR_COVERAGE - $MAIN_COVERAGE" | bc)
          echo "Coverage difference: $DIFF%"

          if (( $(echo "$DIFF < -5" | bc -l) )); then
            echo "‚ùå Coverage decreased by more than 5%"
            exit 1
          elif (( $(echo "$DIFF > 0" | bc -l) )); then
            echo "‚úÖ Coverage improved by $DIFF%"
          else
            echo "‚ö†Ô∏è Coverage changed by $DIFF%"
          fi
        else
          echo "‚ö†Ô∏è Could not compare coverage - missing coverage files"
        fi

  performance-impact:
    name: Test Performance Impact
    runs-on: ubuntu-latest
    needs: coverage-analysis

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Measure test performance
      run: |
        echo "‚è±Ô∏è Measuring test performance..."

        # Measure unit test performance
        START_TIME=$(date +%s%N)
        npm run test:unit
        END_TIME=$(date +%s%N)
        UNIT_DURATION=$((($END_TIME - $START_TIME) / 1000000))
        echo "Unit tests took: ${UNIT_DURATION}ms"

        # Measure integration test performance
        START_TIME=$(date +%s%N)
        npm run test:integration
        END_TIME=$(date +%s%N)
        INTEGRATION_DURATION=$((($END_TIME - $START_TIME) / 1000000))
        echo "Integration tests took: ${INTEGRATION_DURATION}ms"

        # Check if tests are taking too long
        TOTAL_DURATION=$((UNIT_DURATION + INTEGRATION_DURATION))
        echo "Total test duration: ${TOTAL_DURATION}ms"

        if [ $TOTAL_DURATION -gt 300000 ]; then
          echo "‚ö†Ô∏è Tests taking longer than 5 minutes"
        fi

    - name: Archive performance metrics
      uses: actions/upload-artifact@v4
      with:
        name: performance-metrics
        path: |
          performance-results.json
        retention-days: 7