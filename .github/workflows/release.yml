name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test-before-release:
    name: Pre-release Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run comprehensive tests
      run: |
        npm run build
        npm run test:all

    - name: Run lint and type check
      run: |
        npm run lint
        npm run typecheck

  publish-to-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: test-before-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test-before-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREV_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this release

          ${{ steps.changelog.outputs.changelog }}

          ## Installation

          \`\`\`bash
          npm install playwright-coverage-reporter@${{ github.ref_name }}
          \`\`\`

          ## Usage

          See the [README](https://github.com/DoomedRamen/playwright-coverage-reporter/blob/main/README.md) for detailed usage instructions.
        draft: false
        prerelease: false

  test-published-package:
    name: Test Published Package
    runs-on: ubuntu-latest
    needs: publish-to-npm
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Create test project
      run: |
        mkdir test-project
        cd test-project
        npm init -y
        npm install playwright-coverage-reporter@${{ github.ref_name }} @playwright/test

    - name: Create basic test
      working-directory: ./test-project
      run: |
        cat > basic.test.js << 'EOF'
        const { test, expect } = require('@playwright/test');

        test('basic test', async ({ page }) => {
          await page.goto('https://example.com');
          await expect(page.locator('h1')).toBeVisible();
        });
        EOF

    - name: Run basic test with coverage reporter
      working-directory: ./test-project
      run: |
        npx playwright test basic.test.js --reporter=playwright-coverage-reporter

    - name: Verify package structure
      run: |
        cd test-project/node_modules/playwright-coverage-reporter
        echo "Package contents:"
        ls -la
        echo ""
        echo "Dist contents:"
        ls -la dist/
        echo ""
        echo "Package.json main field:"
        node -e "console.log(require('./package.json').main)"
        echo ""
        echo "Package.json types field:"
        node -e "console.log(require('./package.json').types)"

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-github-release, publish-to-npm]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Update version in documentation
      run: |
        # Update version in README if needed
        VERSION=${{ github.ref_name }}
        echo "Updating documentation for version $VERSION"

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        if git diff --staged --quiet; then
          echo "No documentation changes to commit"
        else
          git commit -m "docs: update documentation for ${{ github.ref_name }}"
          git push
        fi

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [publish-to-npm, create-github-release, test-published-package]
    if: always()

    steps:
    - name: Release Notification
      run: |
        if [[ "${{ needs.publish-to-npm.result }}" == "success" &&
              "${{ needs.create-github-release.result }}" == "success" &&
              "${{ needs.test-published-package.result }}" == "success" ]]; then
          echo "üéâ Release ${{ github.ref_name }} completed successfully!"
          echo "üì¶ Package published to NPM"
          echo "üìã GitHub release created"
          echo "‚úÖ Published package tested"
        else
          echo "‚ùå Release had issues"
          echo "NPM Publish: ${{ needs.publish-to-npm.result }}"
          echo "GitHub Release: ${{ needs.create-github-release.result }}"
          echo "Package Test: ${{ needs.test-published-package.result }}"
          exit 1
        fi