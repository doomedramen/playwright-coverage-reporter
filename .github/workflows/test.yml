name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Run unit tests
      run: npm run test:unit

    - name: Run unit tests with coverage
      run: npm run test:unit -- --coverage

    - name: Upload coverage reports to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Archive unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
        retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Run integration tests
      run: npm run test:integration

    - name: Archive integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          test-results/
        retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    strategy:
      matrix:
        browser: [e2e-chrome, e2e-firefox]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Install Playwright browsers
      run: |
        case "${{ matrix.browser }}" in
          "e2e-chrome")
            npx playwright install --with-deps chromium
            ;;
          "e2e-firefox")
            npx playwright install --with-deps firefox
            ;;
        esac

    - name: Start test server
      run: |
        npm run test:server &
        sleep 5

    - name: Run E2E tests with coverage
      env:
        COVERAGE_ENABLED: 'true'
        COVERAGE_THRESHOLD: '80'
      run: npm run test:e2e -- --project=${{ matrix.browser }}

    - name: Archive E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results-${{ matrix.browser }}
        path: |
          test-results/
          coverage-report/
          test-results/playwright-report/
        retention-days: 7

    - name: Upload E2E coverage to Codecov
      if: matrix.browser == 'e2e-chrome'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-report/lcov.info
        flags: e2e
        name: codecov-umbrella

  comprehensive-coverage:
    name: Comprehensive Coverage Test
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Start test server
      run: |
        npm run test:server &
        sleep 5

    - name: Run comprehensive test suite with coverage
      env:
        COVERAGE_ENABLED: 'true'
        COVERAGE_THRESHOLD: '85'
        DEBUG: 'false'
      run: npm run test:coverage

    - name: Generate comprehensive coverage report
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        if [ -f "coverage-report/index.html" ]; then
          echo "✅ Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "📊 Coverage files created:" >> $GITHUB_STEP_SUMMARY
          ls -la coverage-report/ >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Coverage report not found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Archive comprehensive coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-coverage-report
        path: |
          coverage-report/
          test-results/
        retention-days: 30

  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run type check
      run: npm run typecheck

    - name: Check build
      run: npm run build

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Start test server
      run: |
        npm run test:server &
        sleep 5

    - name: Run performance benchmarks
      run: |
        # Add performance test commands here
        echo "Running performance tests..."

    - name: Archive performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: performance-results/
        retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, lint-and-typecheck, security-audit]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate test summary
      run: |
        echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- E2E Tests (Chrome/Firefox): ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Lint & Type Check: ${{ needs.lint-and-typecheck.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Audit: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.unit-tests.result }}" == "success" &&
              "${{ needs.integration-tests.result }}" == "success" &&
              "${{ needs.e2e-tests.result }}" == "success" &&
              "${{ needs.lint-and-typecheck.result }}" == "success" &&
              "${{ needs.security-audit.result }}" == "success" ]]; then
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Please check the individual job results." >> $GITHUB_STEP_SUMMARY
        fi